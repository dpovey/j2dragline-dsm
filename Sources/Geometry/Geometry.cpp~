#include "Geometry.h"
#include <math.h>

using namespace j2;

// TODO: Constants file?
const double MIN_HOIST_ROPE_ANGLE = -5.0 * M_PI / 180.0;
const double GRAVITY = 9.80665;

inline bool GeometryManager::has_slack_rope() const {
    return fabs(_geometry.drag_rope_len - _geometry.hoist_rope_len) > _config.boom_len;
}

inline bool GeometryManager::has_slack_hoist_rope() const {
    return has_slack_rope() && _geometry.drag_rope_len < _geometry.hoist_rope_len;
}

inline bool GeometryManager::has_slack_drag_rope() const {
    return has_slack_rope() && _geometry.drag_rope_len > _geometry.hoist_rope_len;
}

void GeometryManager::update(bool ignore) {
    _geometry.valid = true;
   
    // Compute real boom angle from configured angle and pitch from inclinometer
    _geometry.boom_angle = _config.boom_angle - _pitch;
    double cos_thetaAdjusted = cosf(_geometry.boom_angle);

    _geometry.drag_rope_len = drag_motion.position() + _config.drag_offset;
    _geometry.hoist_rope_len = hoist_motion.position() + _config.hoist_offset;

    // check that the sum of the rope lengths is not less than the boom length
    if (_config.boom_len > _geometry.drag_rope_len + _geometry.hoist_rope_len) {
        _geometry.valid = false;
        // TODO:
        //publish("/alarms/geometry/invalid", _geometry);
        _geometry.valid = false;
        return;
    }
 
    if (has_slack_drag_rope()) {
        // Guess geometry using minimum hoist rope angle and approximate drage rope length
        _geometry.hoist_rope_angle = MIN_HOIST_ROPE_ANGLE;
        _geometry.drag_rope_angle = 
            atanf((_config.boom_len * sinf(_geometry.boom_angle) - _geometry.hoist_rope_len) / 
                  (_config.boom_len * cos_thetaAdjusted));

        // TODO: Should this use the minimum hoist rope angle
        // Should we add _geometry.hoist_rope_len * sinf(MIN_HOIST_ROPE_ANGLE)?
        _geometry.bucket_reach =
            _drag_sheave.position().x + _config.boom_len * cos_thetaAdjusted;

        _geometry.bucket_height =
            _hoist_sheave.position().y - 
            _geometry.hoist_rope_len * cosf(_geometry.hoist_rope_angle) + 
            _config.depth_adjust;

        _geometry.beyond_boom_pt = true;
        return;
    } 

    if (has_slack_hoist_rope()) { 
        _geometry.hoist_rope_angle = _geometry.boom_angle / 2;
        _geometry.drag_rope_angle = M_PI / 2;
        
        _geometry.valid = false;
        
        _geometry.bucket_reach = 
            _drag_sheave.position.x +
            _geometry.drag_rope_len * cosf(_geometry.drag_rope_angle);
        _geometry.bucket_height =
            _hoist_sheave.position.y -
            _geometry.hoist_rope_len * cosf(_geometry.hoist_rope_angle)
            + _config.depth_adjust;
        _geometry.beyond_boom_pt = true;
        return;
    } 

    _geometry.boom_drag_angle = 
        acosf(_geometry.drag_rope_len*_geometry.drag_rope_len + 
              _config.boom_len*_config.boom_len -
              (_geometry.hoist_rope_len*_geometry.hoist_rope_len)/
              (2.0*_geometry.drag_rope_len*_config.boom_len));
    _geometry.drag_rope_angle = _geometry.boom_angle - _geometry.boom_drag_angle;
    _geometry.boom_hoist_angle =
        acosf(_geometry.hoist_rope_len*_geometry.hoist_rope_len +
              _config.boom_len*_config.boom_len -
              (_geometry.drag_rope_len*_geometry.drag_rope_len)/
              (2.0*_geometry.hoist_rope_len*_config.boom_len));
    _geometry.hoist_rope_angle =
        M_PI/2 -
        _geometry.boom_angle -
        _geometry.boom_hoist_angle;
    
    _geometry.hoist_rope_angle =
        std::max(_geometry.hoist_rope_angle, MIN_HOIST_ROPE_ANGLE);
    
    _geometry.bucket_reach =
        _drag_sheave.position().x +
        _geometry.drag_rope_len * cosf(_geometry.drag_rope_angle);
    
    _geometry.bucket_height =
        _hoist_sheave.position.y -
        _geometry.hoist_rope_len * cosf(_geometry.hoist_rope_angle) +
        _config.depth_adjust;
    
    // WTF?
    double rot_vel = _swing_motion.velocity();
    double a_radial = _geometry.bucket_reach * rot_vel * rot_vel;
    double beta_vertical = atanf(a_radial/GRAVITY);
    _geometry.beyond_boom_pt = (_geometry.hoist_rope_angle < 
                                _config.beyond_boom_pt_rad - beta_vertical);
}
